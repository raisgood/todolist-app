{"version":3,"sources":["components/TodoForm/TodoForm.jsx","components/TodoItem/edit-solid.svg","components/TodoItem/check-solid.svg","components/TodoItem/TodoItem.jsx","components/TodoList/TodoList.jsx","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","onSubmit","event","preventDefault","todolist","document","querySelector","value","time","handleAdd","className","type","ClassName","required","placeholder","onClick","handleClear","TodoItem","React","useState","isReadOnly","updateIsReadOnly","setTodolist","setTime","toggleReadyOnly","oldValue","todolistContent","timeContent","image","src","editSolid","alt","onChange","e","currentTarget","handleUpdate","index","checkSolid","TodoList","items","markup","map","item","key","App","counter","setCounter","data","setData","oldData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.590cfb0b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoForm.css';\r\n\r\n// Add and Clear Buttons\r\n\r\nexport default function TodoForm(props) {\r\n    const updateData = event => {\r\n        event.preventDefault();\r\n        const todolist = document.querySelector('.js-todolist-item').value;\r\n        const time = document.querySelector('.js-time').value;\r\n        document.querySelector('.js-todolist-item').value = '';\r\n        document.querySelector('.js-time').value = '';\r\n        props.handleAdd(todolist, time);\r\n    }\r\n\r\n  return (\r\n    <form onSubmit={ updateData }>\r\n    <label className=\"label1\"><strong>Write your Scheduled Activity Here:</strong></label>\r\n      <input type=\"text\" ClassName=\"todolist-item\" required className=\"js-todolist-item\" placeholder=\"List Activity\" />\r\n      <label className=\"label2\"><strong>List the Scheduled Time and \"Press Add\":</strong></label>\r\n      <input type=\"text\" className=\"js-time\" required placeholder=\"List Time\" />\r\n    <button type=\"submit\">Add</button>\r\n    <button onClick={props.handleClear}>Clear</button>\r\n    </form>\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/edit-solid.4ffe848a.svg\";","export default __webpack_public_path__ + \"static/media/check-solid.5dcf9568.svg\";","import React from 'react';\r\nimport './TodoItem.css';\r\nimport editSolid from \"./edit-solid.svg\";\r\nimport checkSolid from \"./check-solid.svg\"\r\n\r\n \r\n\r\n//Check Buttons\r\n\r\n \r\n\r\nexport default function TodoItem(props) {\r\n    const [isReadOnly, updateIsReadOnly] = React.useState(true);\r\n    const [todolist, setTodolist] = React.useState(props.todolist);\r\n    const [time, setTime] = React.useState(props.time);\r\n    const toggleReadyOnly = () => {\r\n        updateIsReadOnly( oldValue => !oldValue );\r\n    }\r\n\r\n    const handleTodolist = (e) => {\r\n        setTodolist(e.currentTarget.value);\r\n        props.handleUpdate(props.index, e.currentTarget.value, time);\r\n    }\r\n\r\n    const handleTime = (e) => {\r\n        setTime(e.currentTarget.value);\r\n        props.handleUpdate(props.index, todolist, e.currentTarget.value);\r\n    }\r\n\r\n\r\n    let todolistContent = null;\r\n    let timeContent = null;\r\n    let image = null;\r\n    if (isReadOnly) {\r\n        todolistContent = todolist;\r\n        timeContent = `(${time})`;\r\n        image =  <img src={editSolid} alt=\"Edit todolist\" className=\"edit-todolist\" onClick={toggleReadyOnly} />;\r\n    } else {\r\n        todolistContent = <input type=\"text\" value={todolist} onChange={handleTodolist} />;\r\n        timeContent = <input type=\"text\" value={time} onChange={handleTime} />;\r\n        image =  <img src={checkSolid} alt=\"Edit todolist\" className=\"edit-todolist\" onClick={toggleReadyOnly} />  \r\n    }\r\n\r\n    return (\r\n        <div className=\"todo-item\">\r\n            {todolistContent} {timeContent}\r\n            {image}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport TodoItem from '../TodoItem/TodoItem';\r\nimport './TodoList.css';\r\n\r\n// To Do List Function\r\n\r\nexport default function TodoList({items, handleUpdate}) {\r\n    const markup = items.map ( item =>\r\n        <TodoItem key={item.key} \r\n        index={item.key} \r\n        todolist={item.todolist} \r\n        time={item.time} \r\n        handleUpdate={handleUpdate} />);\r\n  return (\r\n    <div className=\"todolist-list-container\">\r\n      {markup}\r\n    </div>\r\n  )\r\n}\r\n","import './App.css';\r\nimport React, { useState } from 'react';\r\nimport TodoForm from './components/TodoForm/TodoForm';\r\nimport TodoList from './components/TodoList/TodoList';\r\n\r\n//lines 6 - 55 counter, setCounter, To Do List and Time Choosen\r\n\r\n\r\n//Text written upon appearance of site.\r\nfunction App() {\r\n    const [counter, setCounter] = useState(0);\r\n    const [data, setData] = useState([\r\n    ]);\r\n\r\n    //Makes all the items stay or disappear within the clear button\r\n    const handleClear = (event) => {\r\n        event.preventDefault();\r\n    setData([/*{ todolist: 'Click the Pencil', time: 'To Make Your List', key: '' }*/]);\r\n    }\r\n\r\n    const handleAdd = (todolist, time) => {\r\n        const key = counter;\r\n        setCounter(counter + 1);\r\n        setData(oldData => [...oldData, { todolist, time, key }]);\r\n    }\r\n\r\n    const handleUpdate = (key, todolist, time) => {\r\n        setData(oldData => oldData.map(item => {\r\n            if (key === item.key) {\r\n                return {\r\n                    todolist,\r\n                    time,\r\n                    key\r\n                };\r\n            } else {\r\n                return item;\r\n            }\r\n        }));\r\n    }\r\n\r\n    return ( \r\n        <div className = \"App\">\r\n        <header className = \"App-header\">\r\n        <h2> To Do List </h2>    \r\n        </header>\r\n        <TodoForm handleClear = { handleClear }\r\n        handleAdd = { handleAdd }/>     \r\n        <TodoList items = { data }\r\n        handleUpdate = { handleUpdate }/>  \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}